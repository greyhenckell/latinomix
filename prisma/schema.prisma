// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URI")
}


model DanceDay {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  day String @unique
  services Service[]
  @@map("danceDay")
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  place String
  address String
  start_time String
  end_time String?
  dance_type String?
  description String?
  duration String?
  keys String?
  danceDayId String @db.ObjectId
  danceDay DanceDay @relation(fields: [danceDayId], references: [id])
  @@map("services")
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  price Float
  discount Float
  finalprice Float
  offer Boolean?
}

model News {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  event_name String
  tagClass String
  description String
  place String
  dressCode String
  price String
  imageName String
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime @map("expiresAt")
  user User @relation(fields: [userId], references: [id])
  @@map("sessions")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}